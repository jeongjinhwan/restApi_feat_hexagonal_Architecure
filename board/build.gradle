plugins {
  id 'java'
  id 'war'
  id 'org.springframework.boot' version '3.4.3'
  id 'io.spring.dependency-management' version '1.1.7'
  id "org.openapi.generator" version "7.10.0"
}

group = 'com.board'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

repositories {
  mavenCentral()
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  all {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
  }
}

test {
  enabled = false
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', 'build/generated-sources/java']
    }
  }
}

ext {
  set('springCloudVersion', "2024.0.0")
}



dependencies {
  implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.2'
  // 기본 의존성 정보.
  implementation 'org.springframework.boot:spring-boot-starter-web'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.projectlombok:lombok'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // spring doc openapi 적용 정보.
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

  //  3. openapi generator 적용을 위한 정보
  implementation "org.openapitools:openapi-generator-gradle-plugin:7.8.0"
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'

  //feignClient
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

  //aop
  implementation 'org.springframework.boot:spring-boot-starter-aop'

  //xml feignClient 응답 중 xml이 오는 경우 파싱용.
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2' // 최신 버전으로 추가


}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

// 여기 아래 부분을 별도의 파일로 분리 하고 싶어, 방법을 모르겠음.
// openapi
def serverSwaggerMap = [
  "sample": "board.yml",
  "kma": "kma.yml"
]

serverSwaggerMap.each{key, value ->
  tasks.create("openApiGenerate-server-${key}", org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
    generatorName.set("spring")
    inputSpec.set(project.file("$rootDir/src/main/resources/openapi/${value}").absolutePath)
    outputDir.set(project.file("$buildDir/generated-sources").absolutePath)
    apiPackage.set("com.${key}.adapter.in.web")
    modelPackage.set("com.${key}.adapter.in.dto")
    // templateDir.set(project.file("$rootDir/src/main/resources/templates").absolutePath) // 수정된 템플릿 경로
    configOptions.set(
      [
        library: "spring-boot",
        interfaceOnly: "true",
        useBeanValidation: "true",
        performBeanValidation: "true",
        serializableModel: "true",
        sourceFolder: "/java",
        implFolder: "/java",
        unhandledException: "true",
        useTags: "true"
      ]
    )
  })
}

//feignClient
def clientSwaggerMap = [
  "user": "user.yml",
  "kma": "kma.yml"
]

clientSwaggerMap.each{key, value ->
  tasks.create("openApiGenerate-client-${key}", org.openapitools.generator.gradle.plugin.tasks.GenerateTask, {
    generatorName.set("spring")
    inputSpec.set(project.file("$rootDir/src/main/resources/openapi/client/${value}").absolutePath)
    outputDir.set(project.file("$buildDir/generated-sources").absolutePath)
    apiPackage.set("com.${key}.adapter.out.web")
    modelPackage.set("com.${key}.adapter.out.vo")
    configOptions.set(
      [
        library: "spring-cloud",
        sourceFolder: "/java",
        implFolder: "/java",
        useTags: "true"
      ]
    )
  })
}

tasks.register("openApiGenerate-all") {
  dependsOn(serverSwaggerMap.entrySet().stream().map({e -> "openApiGenerate-server-${e.key}"}).toArray())
  dependsOn(clientSwaggerMap.entrySet().stream().map({e -> "openApiGenerate-client-${e.key}"}).toArray())
}

compileJava.dependsOn tasks.named("openApiGenerate-all")